
project(TsmTest)
aux_source_directory(. TEST_BIN_SRCS)

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
message(STATUS ${PROJECT_NAME})
message(STATUS ${CMAKE_BINARY_DIR})
message(STATUS ${EXECUTABLE_OUTPUT_PATH})
message(STATUS ${PROJECT_BINARY_DIR})
message(STATUS ${PROJECT_SOURCE_DIR})
message(STATUS ${CMAKE_SYSTEM_NAME})
message(STATUS ${CMAKE_TencentSM_ARCH})
message(STATUS ${CMAKE_BUILD_TYPE})

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
	IF (CMAKE_TencentSM_LIBTYPE MATCHES "static")
	    set(TEST_LINKDIRECTORY ${PROJECT_SOURCE_DIR}/../release/${CMAKE_TencentSM_ARCH}/${CMAKE_BUILD_TYPE})
	    set(TEST_LINK_LIBS  libTencentSM.a rt pthread)
	ELSEIF (CMAKE_TencentSM_LIBTYPE MATCHES "shared")
	    set(TEST_LINKDIRECTORY ${PROJECT_SOURCE_DIR}/../release/${CMAKE_TencentSM_ARCH}/${CMAKE_BUILD_TYPE})
	    set(TEST_LINK_LIBS  libTencentSM.so rt pthread)
	ENDIF()
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
	IF (CMAKE_TencentSM_ARCH MATCHES "mac")
		IF (CMAKE_TencentSM_LIBTYPE MATCHES "static")
				set(TEST_LINKDIRECTORY ${PROJECT_SOURCE_DIR}/../release/${CMAKE_TencentSM_ARCH}/${CMAKE_BUILD_TYPE})
				set(TEST_LINK_LIBS  ${PROJECT_SOURCE_DIR}/../release/${CMAKE_TencentSM_ARCH}/${CMAKE_BUILD_TYPE}/libTencentSM.a)
				link_libraries(${PROJECT_SOURCE_DIR}/../release/${CMAKE_TencentSM_ARCH}/${CMAKE_BUILD_TYPE}/libTencentSM.a)
		ELSEIF (CMAKE_TencentSM_LIBTYPE MATCHES "shared")
				set(TEST_LINKDIRECTORY ${PROJECT_SOURCE_DIR}/../release/${CMAKE_TencentSM_ARCH}/${CMAKE_BUILD_TYPE})
				set(TEST_LINK_LIBS  libTencentSM.dylib)
		ENDIF()
	ENDIF()
# ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
#     message(STATUS "CMAKE_SYSTEM_NAME Windows!")

#     IF (CMAKE_TencentSM_LIBTYPE MATCHES "static")
#         message(STATUS "CMAKE_SYSTEM_NAME Windows static!")
#         set(TEST_LINKDIRECTORY ${PROJECT_SOURCE_DIR}/../release/win/${CMAKE_TencentSM_ARCH}/${CMAKE_BUILD_TYPE} ${CMAKE_SOURCE_DIR}/gmp/lib/${TencentSM_ARCH})
#         set(TEST_LINK_LIBS  libTencentSM.a libws2_32.a libgmp.a)
#     ENDIF()
ENDIF()
IF(CMAKE_BUILD_TYPE MATCHES "Debug")
    add_definitions(-D_DEBUG)
ENDIF()

include_directories(${PROJECT_SOURCE_DIR}/../include)
link_directories(${TEST_LINKDIRECTORY})

add_executable(${PROJECT_NAME} ${TEST_BIN_SRCS})
target_link_libraries(${PROJECT_NAME} ${TEST_LINK_LIBS})
