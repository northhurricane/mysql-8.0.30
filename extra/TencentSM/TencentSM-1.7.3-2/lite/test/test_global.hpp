/* Copyright 2019, Tencent Technology (Shenzhen) Co Ltd

This file is part of the Tencent SM (Lite Version) Library.

The Tencent SM (Lite Version) Library is free software; you can redistribute it and/or modify
it under the terms of either:

* the GNU Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your
option) any later version.

or

* the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any
later version.

or both in parallel, as here.

The Tencent SM (Lite Version) Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received copies of the GNU General Public License and the
GNU Lesser General Public License along with the Tencent SM (Lite Version) Library.  If not,
see https://www.gnu.org/licenses/.  */

#ifndef _TEST_GLOBAL_H_
#define _TEST_GLOBAL_H_
#include "stdio.h"

#define RET_OK    0
#define RET_ERR  -1

#define MAX_TID 96

#define SM2_PUBKEY "0409F9DF311E5421A150DD7D161E4BC5C672179FAD1833FC076BB08FF356F35020CCEA490CE26775A52DC6EA718CC1AA600AED05FBF35E084A6632F6072DA9AD13"
#define SM2_PRIKEY "3945208F7B2144B13F36E38AC6D39F95889393692860B51A42FB81EF4DF7C5B8"
#define SM2_PLAINTXT "encryption standard"
#define SM2_CIPHERTXT "307C022004EBFC718E8D1798620432268E77FEB6415E2EDE0E073C0F4F640ECD2E149A73022100E858F9D81E5430A57B36DAAB8F950A3C64E6EE6A63094D99283AFF767E124DF0042059983C18F809E262923C53AEC295D30383B54E39D609D160AFCB1908D0BD8766041321886CA989CA9C7D58087307CA93092D651EFA"
#define SM2_CIPHERTXT_NOASN1 "04EBFC718E8D1798620432268E77FEB6415E2EDE0E073C0F4F640ECD2E149A73E858F9D81E5430A57B36DAAB8F950A3C64E6EE6A63094D99283AFF767E124DF059983C18F809E262923C53AEC295D30383B54E39D609D160AFCB1908D0BD876621886CA989CA9C7D58087307CA93092D651EFA"
#define SM2_SIGHEX "3046022100F5A03B0648D2C4630EEAC513E1BB81A15944DA3827D5B74143AC7EACEEE720B3022100B1B6AA29DF212FD8763182BC0D421CA1BB9038FD1F7F42D4840B69C485BBC1AA"
#define Sm2_SIGHEX_NOASN1 "F5A03B0648D2C4630EEAC513E1BB81A15944DA3827D5B74143AC7EACEEE720B3B1B6AA29DF212FD8763182BC0D421CA1BB9038FD1F7F42D4840B69C485BBC1AA"
#define SM2_SIG_ID "1234567812345678"
#define SM2_SIG_MSG "message digest"
#define SM2_CHECK_APPID "com.tencentsm.test.appid"
#define SM2_CHECK_TOKEN "3043021F3902D01E1B3C587B6C60AF9972D4AEF9019AD03D52F6616BCCD0232067B7C702206BD3C304FD0AABBB854DDB06DE738490F39B4DB1CACBD5638236F375B079AAD6"

#define SM3_MSG  "abc"
#define SM3_MD_DATA "66C7F0F462EEEDD9D1F2D46BDC10E4E24167C4875CF2F7A2297DA02B8F4BA8E0"
#define SM3_HMAC_KEY  "F5A03B0648D2C4630EEAC513E1BB81A15944DA3827D5B74143AC7EACEEE720B3B1B6AA29DF2"
#define SM3_HMAC_RET  "AA3DFE1B896B991786B74C1521A1B661A2605520E57A89668802E0B5F9AE9A1B"
#define SM4_KEYBYTE_LENGTH      16
#define SM4_IV_LENGTH      16
const unsigned char SM4_PLAIN[16] = {0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10};
const unsigned char SM4_KEY[16] = {0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10};
const unsigned char SM4_IV[16] = {0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10};
const unsigned char SM4_ECB_CIPHER[16] = {0x68,0x1e,0xdf,0x34,0xd2,0x06,0x96,0x5e,0x86,0xb3,0xe9,0x4f,0x53,0x6e,0x42,0x46};
const unsigned char SM4_ECB_CIPHER_WITH_PADDING[32] = {0x68,0x1e,0xdf,0x34,0xd2,0x06,0x96,0x5e,0x86,0xb3,0xe9,0x4f,0x53,0x6e,0x42,0x46,
    0x00,0x2a,0x8a,0x4e,0xfa,0x86,0x3c,0xca,0xd0,0x24,0xac,0x03,0x00,0xbb,0x40,0xd2};
const unsigned char SM4_CBC_CIPHER[16] = {0x26,0x77,0xf4,0x6b,0x09,0xc1,0x22,0xcc,0x97,0x55,0x33,0x10,0x5b,0xd4,0xa2,0x2a};
const unsigned char SM4_CBC_CIPHER_WITH_PADDING[32] = {0x26,0x77,0xf4,0x6b,0x09,0xc1,0x22,0xcc,0x97,0x55,0x33,0x10,0x5b,0xd4,0xa2,0x2a,
    0x3b,0x88,0x0e,0x68,0x67,0x77,0x25,0x22,0xae,0x55,0xd2,0xf0,0xae,0x74,0x78,0xae};
const unsigned char SM4_CTR_CIPHER[16] = {0x69,0x3d,0x9a,0x53,0x5b,0xad,0x5b,0xb1,0x78,0x6f,0x53,0xd7,0x25,0x3a,0x70,0x56};

/* SM4除ECB模式以外，其他模式的测试用例的加密长度需大于一个分组 */
#define SM4_GCM_TEST_PLAIN_LEN 64
#define SM4_GCM_TEST_CIPHER_LEN 80
#define SM4_GCM_TEST_CIPHER_NOPADDING_LEN 64
const unsigned char SM4_GCM_TEST_KEY[16] = {0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10};
const unsigned char SM4_GCM_TEST_IV[16] = {0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10};
const unsigned char SM4_GCM_TEST_PLAIN[64] = {0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10};
const unsigned char SM4_GCM_TEST_CIPHER[80] = {0x9C,0x6C,0xA8,0xBC,0x56,0x78,0x5E,0xF6,0x56,0xDB,0x0E,0x1C,0xDB,0xF9,0x63,0xFD,0xE1,0x41,0xAB,0x56,0x17,0xD2,0xE1,0xD7,0x95,0x86,0x70,0x35,0x3F,0x37,0x59,0x82,0xFF,0xB1,0xC8,0x5F,0xAD,0x11,0x17,0xC8,0x48,0xE2,0x6D,0x45,0x7D,0xF5,0x77,0xEC,0x82,0xEB,0xF9,0x64,0x55,0xA7,0xD0,0x06,0x70,0xEA,0xC1,0x93,0x9D,0xCF,0x7F,0xB8,0x77,0x36,0x8F,0xB2,0xB3,0x03,0x47,0x86,0x14,0x0F,0x58,0x8B,0x83,0x69,0x3F,0x24};
const unsigned char SM4_GCM_TEST_CIPHER_NOPADDING[64] = {0x9C,0x6C,0xA8,0xBC,0x56,0x78,0x5E,0xF6,0x56,0xDB,0x0E,0x1C,0xDB,0xF9,0x63,0xFD,0xE1,0x41,0xAB,0x56,0x17,0xD2,0xE1,0xD7,0x95,0x86,0x70,0x35,0x3F,0x37,0x59,0x82,0xFF,0xB1,0xC8,0x5F,0xAD,0x11,0x17,0xC8,0x48,0xE2,0x6D,0x45,0x7D,0xF5,0x77,0xEC,0x82,0xEB,0xF9,0x64,0x55,0xA7,0xD0,0x06,0x70,0xEA,0xC1,0x93,0x9D,0xCF,0x7F,0xB8};
const unsigned char SM4_GCM_TEST_AAD[16] = {0x26,0x77,0xF4,0x6B,0x09,0xC1,0x22,0xCC,0x97,0x55,0x33,0x10,0x5B,0xD4,0xA2,0x2A};
const unsigned char SM4_GCM_TEST_TAG[16] = {0xD5,0x48,0xE8,0x4C,0x7E,0xB4,0xB3,0xAF,0xC4,0xC3,0x87,0x03,0x39,0x99,0x0D,0xE1};
const unsigned char SM4_GCM_TEST_TAG_NOPADDING[16] = {0x52,0x93,0xFA,0xA2,0xE8,0xC9,0xA6,0x7E,0x77,0xF8,0x77,0xC7,0xAD,0x34,0x9D,0x8C};


typedef int (*TEST_FUNC_T) (void);
typedef int (*TEST_ABILITY_T)(int times,size_t data_length);

void tc_bin2hex(const unsigned char *buffer, size_t len, char outbuf[], size_t outbuflen);
unsigned char* tc_hex2bin(const char* hexstr, unsigned char* bytes);
void printBytes(unsigned char * bytes, int len) ;
char* tcsm_readPEM(const char* path, const char* filename);
int tcsm_writePEM(const char* path, const char* filename, char* pem);
unsigned long get_tick_count();

void testInterface(const char* name);
void test_ability(const char* name);
#endif //_TEST_GLOBAL_H_
