cmake_minimum_required(VERSION 2.8)

#no this lineâ†“ will go warning in win msys64
project(SMLiteALL)

#global settings
enable_language(CXX C ASM)
#global var set
set(SUB_CMAKE_LIB_TYPE "STATIC")
set(SUB_LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/tmp)

IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(MY_LINK_OBJSUFFIX ".obj")
ELSE()
    set(MY_LINK_OBJSUFFIX ".o")
ENDIF()
##add id check
add_definitions(-D_TSM_APPID_CHECK)

#print gcc info
# set(CMAKE_VERBOSE_MAKEFILE ON)
message("----------project------------")
message(STATUS ${CMAKE_SYSTEM_NAME})
message(STATUS "CMAKE_SYSTEM_PROCESSOR=${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "CMAKE_LIBRARY_ARCHITECTURE=${CMAKE_LIBRARY_ARCHITECTURE}")
message(STATUS "PROJECT_BINARY_DIR=${PROJECT_BINARY_DIR}")
message(STATUS "CMAKE_SOURCE_DIR:${CMAKE_SOURCE_DIR}")
message(STATUS "CMAKE_HOME_DIRECTORY:${CMAKE_HOME_DIRECTORY}")
message(STATUS "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")

#macro for add subdir in source
macro(macro_set_subdir subdir_name)
    set(SUB_PROJECT_NAME tgm_${subdir})
    set(MY_ALLOBJS ${MY_ALLOBJS} ${CMAKE_SOURCE_DIR}/build/tmp/source/${subdir_name}/CMakeFiles/${SUB_PROJECT_NAME}.dir/*${MY_LINK_OBJSUFFIX})
    set(MY_ALLSUBLIBS ${MY_ALLSUBLIBS} ${SUB_PROJECT_NAME})
endmacro(macro_set_subdir)
macro(macro_add_subdir subdir_name)
    set(SUB_PROJECT_NAME tgm_${subdir})
    add_subdirectory(${subdir})
endmacro(macro_add_subdir)
# add_dependencies(${proj_name} tgm_common)

#subdir
message(STATUS "CMAKE_IS_TESTONLY is ${CMAKE_IS_TESTONLY}")
if(NOT(CMAKE_IS_TESTONLY MATCHES "1"))
   add_subdirectory(source)
endif()
#windows support later
# if((CMAKE_SYSTEM_NAME MATCHES "Linux") OR (CMAKE_SYSTEM_NAME MATCHES "Windows"))
if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    add_subdirectory(test)
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
  if (CMAKE_TencentSM_ARCH MATCHES "mac")
    add_subdirectory(test)
  endif()
endif()

# if(CMAKE_SYSTEM_NAME MATCHES "Windows")
#   if (CMAKE_TencentSM_LIBTYPE MATCHES "static")
#     add_subdirectory(test)
#   endif()
# endif()

find_program(MEMORYCHECK_COMMAND NAMES valgrind)
set(MEMORYCHECK_COMMAND_OPTIONS "--trace-children=yes --leak-check=full")

#ctest
include(CTest)
if(BUILD_TESTING)
    message(STATUS test enabled!)
endif()
#macro define
macro(dotest arg1 methodname)
    add_test(TEST_${arg1}_${methodname} TsmTest ${arg1} ${methodname})
    set_tests_properties (TEST_${arg1}_${methodname}
        PROPERTIES
        PASS_REGULAR_EXPRESSION "${methodname} is OK"
        )
    set_tests_properties(TEST_${arg1}_${methodname} PROPERTIES TIMEOUT 30000)
endmacro(dotest arg1 methodname)
# does test
dotest(interface Version)

dotest(interface SM2CtxSize)
dotest(interface SM2InitCtx_Free)
dotest(interface SM2InitCtxWithPubKey)
dotest(interface generatePrivateKey)
dotest(interface generatePublicKey)
dotest(interface generateKeyPair)
dotest(interface SM2Decrypt)
dotest(interface SM2Encrypt)
dotest(interface SM2Verify)
dotest(interface SM2Sign)

dotest(interface SM3CtxSize)
dotest(interface SM3Init)
dotest(interface SM3UpdateFinal)
dotest(interface SM3)
dotest(interface SM3_hmac)
dotest(interface SM3_hmac_steps)
dotest(interface SM3KDF)

dotest(interface generateSM4Key)
dotest(interface SM4_CBC_Encrypt)
dotest(interface SM4_CBC_Decrypt)
dotest(interface SM4_CBC_Encrypt_NoPadding)
dotest(interface SM4_CBC_Decrypt_NoPadding)
dotest(interface SM4_ECB_Encrypt)
dotest(interface SM4_ECB_Decrypt)
dotest(interface SM4_ECB_Encrypt_NoPadding)
dotest(interface SM4_ECB_Decrypt_NoPadding)
dotest(interface SM4_CTR_Encrypt_NoPadding)
dotest(interface SM4_CTR_Decrypt_NoPadding)
dotest(interface SM4_GCM_Encrypt)
dotest(interface SM4_GCM_Decrypt)
dotest(interface SM4_GCM_Encrypt_NoPadding)
dotest(interface SM4_GCM_Decrypt_NoPadding)
dotest(interface SM4_GCM_Encrypt_Decrypt_NoPadding_NIST_SP800_38D)
dotest(interface SM4_GCM_Encrypt_Decrypt_NIST_SP800_38D)
dotest(interface SM4_CBC_Encrypt_Steps)
dotest(interface SM4_CBC_Decrypt_Steps)
dotest(interface SM4_CBC_Encrypt_NoPadding_Steps)
dotest(interface SM4_CBC_Decrypt_NoPadding_Steps)
dotest(interface SM4_ECB_Encrypt_Steps)
dotest(interface SM4_ECB_Decrypt_Steps)
dotest(interface SM4_ECB_Encrypt_NoPadding_Steps)
dotest(interface SM4_ECB_Decrypt_NoPadding_Steps)
dotest(interface SM4_CTR_Encrypt_NoPadding_Steps)
dotest(interface SM4_CTR_Decrypt_NoPadding_Steps)
dotest(interface SM4_GCM_Encrypt_NoPadding_Steps)
dotest(interface SM4_GCM_Decrypt_NoPadding_Steps)

dotest(interface SM2DecryptWithMode)
dotest(interface SM2EncryptWithMode)
dotest(interface SM2VerifyWithMode)
dotest(interface SM2SignWithMode)

dotest(ability sm2_generate_keypair_perf)
dotest(ability sm2_encrypt_decrypt_perf)
dotest(ability sm2_sign_verify_perf)
dotest(ability test_sm2_multithread)

dotest(ability sm4_generate_key_perf)
dotest(ability sm4_cbc_encrypt_decrypt_perf)
dotest(ability sm4_ecb_encrypt_decrypt_perf)
dotest(ability sm4_gcm_encrypt_decrypt_perf)
dotest(ability sm4_gcm_nist_encrypt_decrypt_perf)
dotest(ability sm4_cbc_nopadding_encrypt_decrypt_perf)
dotest(ability sm4_ecb_nopadding_encrypt_decrypt_perf)
dotest(ability sm4_ctr_nopadding_encrypt_decrypt_perf)
dotest(ability sm4_gcm_nopadding_encrypt_decrypt_perf)
dotest(ability sm4_gcm_nopadding_nist_encrypt_decrypt_perf)
dotest(ability sm4_cbc_steps_encrypt_decrypt_perf)
dotest(ability sm4_ecb_steps_encrypt_decrypt_perf)
dotest(ability sm4_cbc_nopadding_steps_encrypt_decrypt_perf)
dotest(ability sm4_ecb_nopadding_steps_encrypt_decrypt_perf)
dotest(ability sm4_ctr_nopadding_steps_encrypt_decrypt_perf)
dotest(ability sm4_gcm_nopadding_steps_encrypt_decrypt_perf)
dotest(ability test_sm4_multithread)

dotest(ability sm3_md_perf)
dotest(ability sm3_hmac_perf)
dotest(ability test_sm3_multithread)
